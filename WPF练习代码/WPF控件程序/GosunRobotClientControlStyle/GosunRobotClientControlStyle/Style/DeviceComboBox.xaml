<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--DeviceComboBox-->
    <ImageBrush x:Key="ButtonNormal"   ImageSource="/Images/ComboBoxIcon/当前机器人_边框.png" Stretch="Fill"  TileMode="None" AlignmentX="Center"  AlignmentY="Center" />
    <ImageBrush x:Key="ButtonMouseOver"   ImageSource="/Images/ComboBoxIcon/下拉菜单及日历年月_按钮_悬浮.png" Stretch="Fill"  TileMode="None" AlignmentX="Center"  AlignmentY="Center" />
    <ImageBrush x:Key="ButtonMouseDown"   ImageSource="/Images/ComboBoxIcon/下拉菜单及日历年月_按钮_正常.png" Stretch="Fill"  TileMode="None" AlignmentX="Center"  AlignmentY="Center" />

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <!--调完后记得改回Background="{TemplateBinding Background}-->
        <Border x:Name="PART_ContentHost"  Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <SolidColorBrush x:Key="slected_foreground" Color="#FF74F0FE" Opacity="0.4"/>
    <SolidColorBrush x:Key="PopBorderBrush" Color="#FF74F0FE" Opacity="1"/>
    <ControlTemplate x:Key="SelectionBoxItemTemplate" TargetType="{x:Type TextBox}">
        <Border x:Name="Selected_ContentHost" Width="250" Height="50" 
                    Focusable="False" Background="{StaticResource ResourceKey=slected_foreground}" />
    </ControlTemplate>
    <LinearGradientBrush x:Key="Item_background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF184E8C" Offset="0"/>
        <GradientStop Color="#FFEBEBEB"/>
        <GradientStop Color="#FF184E8C"/>
        <GradientStop Color="#FF0B2147" Offset="0.8"/>
    </LinearGradientBrush>
    <ControlTemplate x:Key="ItemTemplateSelector" TargetType="{x:Type TextBox}">
        <Border x:Name="Selected_ContentHost" Width="250" Height="50" 
                    Focusable="False" Background="{StaticResource ResourceKey=Item_background}">
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Border  Background="Transparent" x:Name="border"  BorderThickness="1" Width="60">
            <Grid >
                <!--<Image Grid.Column="0" Width="2" Height="35" Source="/Images/ComboBoxIcon/下拉菜单_分隔线.png"/>-->
                <Image Margin="10" Width="11" Height="6" Source="/Images/ComboBoxIcon/当前机器人_小三角.png"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <Style x:Key="DeviceComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Width" Value="298"/>
        <Setter Property="Height" Value="89"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="24"/>
        <!--设置背景-->
        <Setter Property="Background" Value="{StaticResource ButtonNormal}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid  Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="58"/>
                            <ColumnDefinition Width="105"/>
                            <ColumnDefinition Width="105"/>
                            <ColumnDefinition Width="30"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="1" FontSize="24" Foreground="White" Text="机器人:"
                               Margin="25,0,0,8"
                               VerticalAlignment="Center" HorizontalAlignment="Left"/>
                        <!-- ToggleButton 已数据绑定到 ComboBox 本身以切换 IsDropDownOpen -->
                        <!--用于触发下拉列表的-->
                        <ToggleButton Grid.Column="2" Grid.ColumnSpan="2"
                                          Background="{TemplateBinding Background}"
                                          Template="{DynamicResource ComboBoxToggleButton}" 
                                          x:Name="ToggleButton" Focusable="false" Width="250"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, 
                                RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"  />
                        <!--选中后显示在ComboBox的文字-->
                        <ContentPresenter HorizontalAlignment="Center"  Grid.Column="2" 
                                              x:Name="ContentSite" 
                                              VerticalAlignment="Center" 
                                              Margin="0,0,0,8"
                                              Content="{TemplateBinding SelectionBoxItem}" 
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                              IsHitTestVisible="True"/>

                        <!-- 必须将 TextBox 命名为 PART_EditableTextBox，否则 ComboBox 将无法识别它 Style="{x:Null}" -->
                        <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" Style="{x:Null}"
                                     HorizontalAlignment="Left" Margin="31,3,23,3" x:Name="PART_EditableTextBox"
                                      VerticalAlignment="Center" Focusable="True" Background="Yellow"  
                                     IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <!--下拉列表-->
                        <!-- Popup 可显示 ComboBox 中的项列表。IsOpen 已数据绑定到通过 ComboBoxToggleButton 来切换的 IsDropDownOpen -->
                        <!--HorizontalOffset与VerticalOffset属性控制下拉框的显示位置-->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Width="250" Margin="100,0,0,0"
                                   Placement="Bottom" x:Name="Popup" Focusable="False"  HorizontalOffset="62" VerticalOffset="-20"
                                   AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid  x:Name="DropDown" SnapsToDevicePixels="True">
                                <!--显示下拉列表背景和描框-->
                                <Border x:Name="DropDownBorder"  Width="250" 
                                            Background="{DynamicResource Item_background}" 
                                            BorderBrush="{DynamicResource PopBorderBrush}" BorderThickness="2"/>
                                <ScrollViewer Margin="2" 
                                                  SnapsToDevicePixels="True" 
                                                  HorizontalScrollBarVisibility="Auto" 
                                                  VerticalScrollBarVisibility="Auto" 
                                                  CanContentScroll="True">
                                    <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                    <StackPanel IsItemsHost="True" Width="250"   KeyboardNavigation.DirectionalNavigation="Contained" Background="Transparent"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

     <!--InfoComboBox-->
    <SolidColorBrush x:Key="DropDownBorderBrush"  Color="#0e1116" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#FF7CF1FF" Opacity="0.2"/>

    <ImageBrush x:Key="InfoButtonNormal"   ImageSource="/Images/ComboBoxIcon/下拉菜单及日历年月_按钮_正常.png" Stretch="Fill"  TileMode="None" AlignmentX="Center"  AlignmentY="Center" />
    <ImageBrush x:Key="InfoButtonMouseOver"   ImageSource="/Images/ComboBoxIcon/下拉菜单及日历年月_按钮_悬浮.png" Stretch="Fill"  TileMode="None" AlignmentX="Center"  AlignmentY="Center" />
    <ImageBrush x:Key="InfoButtonMouseDown"   ImageSource="/Images/ComboBoxIcon/下拉菜单及日历年月_按钮_点击.png" Stretch="Fill"  TileMode="None" AlignmentX="Center"  AlignmentY="Center" />

    <ControlTemplate x:Key="InfoComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <ControlTemplate x:Key="InfoComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Border Background="{StaticResource InfoButtonNormal}" x:Name="border"  BorderThickness="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="25" />
                </Grid.ColumnDefinitions>
                <!--<Border BorderBrush="Red" BorderThickness="2" CornerRadius="4">
            </Border>-->
                <Border Grid.Column="0"/>
                <Border Grid.Column="1"/>
                <Border Grid.Column="2"/>
                <!--<Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Fill="WhiteSmoke" />-->
                <Image Grid.Column="1" Width="2" Height="35" Source="/Images/ComboBoxIcon/下拉菜单_分隔线.png"/>
                <Image Grid.Column="2" Width="11" Height="6" Source="/Images/ComboBoxIcon/下拉菜单_小三角.png"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border"  Value="{StaticResource InfoButtonMouseOver}"/>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style x:Key="InfoComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Width" Value="152"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Height" Value="37"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!-- ToggleButton 已数据绑定到 ComboBox 本身以切换 IsDropDownOpen -->
                        <ToggleButton Grid.Column="2" Template="{DynamicResource InfoComboBoxToggleButton}" 
                                      x:Name="ToggleButton" Focusable="false" 
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, 
                            RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"  />
                        <ContentPresenter HorizontalAlignment="Left"  x:Name="ContentSite" VerticalAlignment="Center" 
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                          IsHitTestVisible="False"/>

                        <!-- 必须将 TextBox 命名为 PART_EditableTextBox，否则 ComboBox 将无法识别它 -->
                        <TextBox Visibility="Hidden" Template="{DynamicResource InfoComboBoxTextBox}"
                                 HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox"
                                 Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" 
                                 IsReadOnly="{TemplateBinding IsReadOnly}"/>

                        <!-- Popup 可显示 ComboBox 中的项列表。IsOpen 已数据绑定到通过 ComboBoxToggleButton 来切换的 IsDropDownOpen -->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom"
                               x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                  MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Width="100" Margin="50,0,0,0"
                                        Background="{DynamicResource DropDownBorderBrush}" 
                                        BorderBrush="{DynamicResource SolidBorderBrush}" 
                                        BorderThickness="1"/>
                                <ScrollViewer Margin="2" 
                                              SnapsToDevicePixels="True" 
                                              HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" CanContentScroll="False">
                                    <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="#36455c"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
  
    <!--CameraComboBox-->
    <SolidColorBrush x:Key="DropDownBorderBrush2"  Color="#0e1116" />
    <SolidColorBrush x:Key="NormalBorderBrush2" Color="#FF7CF1FF" Opacity="0.2"/>

    <ImageBrush x:Key="CameraButtonNormal"   ImageSource="/Images/ComboBoxIcon/下拉菜单及日历年月_按钮_正常.png" Stretch="Fill"  TileMode="None" AlignmentX="Center"  AlignmentY="Center" />
    <ImageBrush x:Key="CameraButtonMouseOver"   ImageSource="/Images/ComboBoxIcon/下拉菜单及日历年月_按钮_悬浮.png" Stretch="Fill"  TileMode="None" AlignmentX="Center"  AlignmentY="Center" />
    <ImageBrush x:Key="CameraButtonMouseDown"   ImageSource="/Images/ComboBoxIcon/下拉菜单及日历年月_按钮_点击.png" Stretch="Fill"  TileMode="None" AlignmentX="Center"  AlignmentY="Center" />

    <ControlTemplate x:Key="CameraComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <ControlTemplate x:Key="CameraComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Border Background="Black" x:Name="border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="15"/>
                    <ColumnDefinition Width="30"/>
                </Grid.ColumnDefinitions>
                <Image Width="15"  Source="/Images/ComboBoxIcon/下拉菜单_分隔线.png" />
                <Image Width="60" Source="/Images/ComboBoxIcon/下拉菜单_小三角.png"/>
            </Grid>
        </Border>
    </ControlTemplate>
    <SolidColorBrush x:Key="Background" Color="Black" Opacity="0.8"/>
    <SolidColorBrush   x:Key="BorderTicknessColor" Color="#FF100E0E" Opacity="1"/>
    <Style x:Key="CameraComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Width" Value="125"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="20"/>
        <!--设置背景{StaticResource ResourceKey=Background}-->
        <Setter Property="Background" Value="LightSteelBlue" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid  Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50"/>
                            <ColumnDefinition Width="75"/>
                        </Grid.ColumnDefinitions>
                        
                        <!-- ToggleButton 已数据绑定到 ComboBox 本身以切换 IsDropDownOpen -->
                        <!--用于触发下拉列表的-->
                        <ToggleButton Grid.Column="1" 
                                      BorderBrush="Black" BorderThickness="8" Width="65"
                                          Background="{TemplateBinding Background}"
                                          Template="{DynamicResource ComboBoxToggleButton}" 
                                          x:Name="ToggleButton" Focusable="false" 
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, 
                                RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"  />
                        <!--选中后显示在ComboBox的文字-->
                        <ContentPresenter HorizontalAlignment="Center"  Grid.Column="0" 
                                              x:Name="ContentSite" 
                                              VerticalAlignment="Center" 
                                              Content="{TemplateBinding SelectionBoxItem}" 
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                              IsHitTestVisible="True"/>   
                        <!--下拉列表-->
                        <!-- Popup 可显示 ComboBox 中的项列表。IsOpen 已数据绑定到通过 ComboBoxToggleButton 来切换的 IsDropDownOpen -->
                        <!--HorizontalOffset与VerticalOffset属性控制下拉框的显示位置-->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Width="125" 
                                   Placement="Bottom" x:Name="Popup" Focusable="False"  
                                   AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid  x:Name="DropDown" SnapsToDevicePixels="True">
                                <!--显示下拉列表背景和描框-->
                                <Border x:Name="DropDownBorder"  Width="125" 
                                            Background="{DynamicResource Background}" 
                                            BorderBrush="{DynamicResource BorderTicknessColor}" BorderThickness="8"/>
                                <ScrollViewer Margin="2" 
                                                  SnapsToDevicePixels="True" 
                                                  HorizontalScrollBarVisibility="Auto" 
                                                  VerticalScrollBarVisibility="Auto" 
                                                  CanContentScroll="True">
                                    <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                    <StackPanel IsItemsHost="True" Width="125"   KeyboardNavigation.DirectionalNavigation="Contained" Background="Transparent"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>